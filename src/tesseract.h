//===--- tesseract.h - Tesseract Drawing/Rendering Functions ----*- C++ -*-===//
//
//                              MC 4D Renderer
//                        Michael Layzell - CISC 454
//                        Queen's University - W2015
//
//===----------------------------------------------------------------------===//

#ifndef __tesseract_h
#define __tesseract_h

// #define TESSERACT_CUBES

#include "gl.h"
#include <glm/glm.hpp>

struct TesseractVert {
  glm::vec4 loc;
  glm::vec4 color;

  TesseractVert() {}
  TesseractVert(glm::vec4 loc) : loc(loc) {
    if (loc.y == 0.5) {
      // Green
      color = glm::vec4(0.34765625, 0.59375, 1, 1);
    } else {
      // Brown
      color = glm::vec4(0.46875, 0.28125, 0, 1);
    }
  }

  TesseractVert operator+(glm::vec4 offset) {
    TesseractVert tv(loc + offset);
    tv.color = color;
    return tv;
  }
};

static_assert(sizeof(TesseractVert) == 8*sizeof(float),
              "Tesseract Vert must be 8 floats");

struct Tesseract {
  // There are 24 faces on a tesseract
#ifdef TESSERACT_CUBES
  static const size_t FACE_COUNT = 48;// 24;
#else
  static const size_t FACE_COUNT = 24;
#endif
  static const size_t FACE_SIZE = 4;
  static const size_t FACES_SIZE = FACE_COUNT * FACE_SIZE;
  static TesseractVert faces[FACES_SIZE];
  static GLuint VAO;

  // They are generated by the gen() function;
  static void gen();

  static const size_t OUT_SIZE = FACE_COUNT * 6;
  static void withOffset(glm::vec4 offset, TesseractVert *out);

  static const size_t LINES_SIZE = FACE_COUNT * 8;
  static void linesWithOffset(glm::vec4 offset, glm::vec4 *out);
};


#endif // defined(__tesseract_h)
